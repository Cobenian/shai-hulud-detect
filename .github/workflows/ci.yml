name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --verbose

      - name: Build release
        run: cargo build --release --verbose

      - name: Test binary functionality
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            BINARY="./target/release/shai-hulud-detector.exe"
          else
            BINARY="./target/release/shai-hulud-detector"
          fi
          
          # Test help command
          $BINARY --help
          
          # Test version command
          $BINARY --version
          
          echo "‚úÖ Binary tests passed"

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  check-embedded-data:
    name: Check Embedded Data
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify compromised-packages.txt exists
        run: |
          if [ ! -f "compromised-packages.txt" ]; then
            echo "‚ùå Error: compromised-packages.txt not found"
            exit 1
          fi
          
          # Check file is not empty
          if [ ! -s "compromised-packages.txt" ]; then
            echo "‚ùå Error: compromised-packages.txt is empty"
            exit 1
          fi
          
          # Count packages
          PACKAGE_COUNT=$(grep -c ":" compromised-packages.txt || true)
          echo "üì¶ Found $PACKAGE_COUNT compromised packages"
          
          if [ "$PACKAGE_COUNT" -lt 500 ]; then
            echo "‚ö†Ô∏è  Warning: Package count seems low ($PACKAGE_COUNT)"
          else
            echo "‚úÖ Package count looks good ($PACKAGE_COUNT)"
          fi

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Test embedded data compilation
        run: |
          echo "üß™ Testing that embedded data compiles correctly..."
          cargo check --release
          echo "‚úÖ Embedded data compilation successful"
